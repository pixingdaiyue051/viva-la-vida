package com.tequeno.vivaboot;

import com.tequeno.common.constants.HtResultBinder;
import com.tequeno.common.mq.HtJmsModel;
import com.tequeno.common.utils.HtResultInfoWrapper;
import com.tequeno.config.mq.activemq.JmsScheduledPublisher;
import com.tequeno.config.mq.activemq.JmsSimplePublisher;
import com.tequeno.config.mq.activemq.ScheduledMessagePostProcessor;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;

@RestController
@RequestMapping("test/active")
public class ActiveMqController {

    @Resource
    private JmsSimplePublisher publisher;

    @Resource
    private JmsScheduledPublisher scheduledPublisher;

    @RequestMapping("queue")
    public HtResultBinder queue(@RequestParam("msg") String msg) {
        HtJmsModel model = new HtJmsModel();
        model.setMsg(msg);
        publisher.sendQueue(model);
        return HtResultInfoWrapper.success();
    }

    @RequestMapping("topic")
    public HtResultBinder topic(@RequestParam("msg") String msg) {
        HtJmsModel model = new HtJmsModel();
        model.setMsg(msg);
        publisher.sendTopic(model);
        return HtResultInfoWrapper.success();
    }

    @RequestMapping("sche/queue")
    public HtResultBinder queue(@RequestParam("msg") String msg,
                                @RequestParam(value = "delay", required = false) Long delay,
                                @RequestParam(value = "repeat", required = false) Integer repeat,
                                @RequestParam(value = "period", required = false) Long period,
                                @RequestParam(value = "cron", required = false) String cron) {
        HtJmsModel model = new HtJmsModel();
        model.setMsg(msg);
        ScheduledMessagePostProcessor postProcessor = new ScheduledMessagePostProcessor();
        postProcessor.setDelay(delay);
        postProcessor.setRepeat(repeat);
        postProcessor.setPeriod(period);
        postProcessor.setCron(cron);
        scheduledPublisher.sendQueue(model, postProcessor);
        return HtResultInfoWrapper.success();
    }

    @RequestMapping("sche/topic")
    public HtResultBinder topic(@RequestParam("msg") String msg,
                                @RequestParam(value = "delay", required = false) Long delay,
                                @RequestParam(value = "repeat", required = false) Integer repeat,
                                @RequestParam(value = "period", required = false) Long period,
                                @RequestParam(value = "cron", required = false) String cron) {
        HtJmsModel model = new HtJmsModel();
        model.setMsg(msg);
        ScheduledMessagePostProcessor postProcessor = new ScheduledMessagePostProcessor();
        postProcessor.setDelay(delay);
        postProcessor.setRepeat(repeat);
        postProcessor.setPeriod(period);
        postProcessor.setCron(cron);
        scheduledPublisher.sendTopic(model, postProcessor);
        return HtResultInfoWrapper.success();
    }
}
